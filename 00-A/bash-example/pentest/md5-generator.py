#!/usr/bin/env python3
# execution example: python3 md5-generator.py 2
import sys
import hashlib

# https://www.owasp.org/index.php/Password_special_characters
# for each_char in {A..z}; do printf "%s"$each_char; done
VALUES = "0123456789 !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

def init_value():
    return VALUES[0]


def next_value(element):
    index = VALUES.index(element)
    if (index+1)==len(VALUES):
        return None
    else:
        return VALUES[index+1]


def next_value_for_index(index_of_element, values):
    if index_of_element>(len(values)-1):
        values.append(init_value())
        return values

    next_element = next_value(values[index_of_element])
    if next_element is None:
        values[index_of_element]=init_value()
        return next_value_for_index(index_of_element+1, values)
    else:
        values[index_of_element] = next_element
        return values


def next(list_of_chars, max_length):
    list_of_chars = next_value_for_index(0, list_of_chars)

    if(len(list_of_chars)>max_length):
        return None
    else:
        return list_of_chars


def to_reverse_string(list_of_chars):
    new_array = list_of_chars.copy()
    new_array.reverse()
    return "".join(new_array)


def main(length_of_word):
    payload = [init_value()]

    while( payload is not None ):
        text = to_reverse_string(payload)
        hash = hashlib.md5(text.encode("utf-8")).hexdigest()
        print( "%s %s" % ( hash, text ) )
        payload  = next(payload, length_of_word)        


if __name__=='__main__':
    if ( len(sys.argv)<2):
        print("expected input parameters are: {max length of password}")
        sys.exit(1)
    main( int(sys.argv[1:][0]) )
